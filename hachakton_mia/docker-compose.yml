version: '3.8'

services:
  # Service MongoDB
  mongodb:
    image: mongo:latest
    container_name: mongodb
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
    networks:
      - app-network
      
  # MongoDB Express - Interface web pour MongoDB
  mongo-express:
    image: mongo-express:latest
    container_name: mongo-express
    restart: always
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=password
      - ME_CONFIG_MONGODB_SERVER=mongodb
      - ME_CONFIG_BASICAUTH_USERNAME=admin
      - ME_CONFIG_BASICAUTH_PASSWORD=password
    depends_on:
      - mongodb
    networks:
      - app-network

  # Service Redis
  redis:
    image: redis:latest
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - app-network

  # # Service Elasticsearch 
  # elasticsearch:
  #   image: elasticsearch:8.17.1
  #   container_name: elasticsearch
  #   environment:
  #     - discovery.type=single-node
  #     - xpack.security.enabled=false
  #     - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
  #   ports:
  #     - "9200:9200"
  #   volumes:
  #     - es_data:/usr/share/elasticsearch/data
  #   networks:
  #     - app-network

  # Service Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend
    restart: always
    ports:
      - "5000:5000"
      - "5001:5001"
    depends_on:
      - mongodb
      - redis
      # - elasticsearch
    volumes:
      - ./backend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - PORT=5000
      - MONGODB_URI=mongodb://admin:password@mongodb:27017/tweeter?authSource=admin
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
      - JWT_SECRET=your_jwt_secret_replace_in_production
      - JWT_EXPIRE=2h
      - JWT_REFRESH_EXPIRE=7d
    networks:
      - app-network

  # Service Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    restart: always
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
    environment:
      - NEXT_PUBLIC_API_URL=http://backend:5000
      - NEXT_PUBLIC_AI_API_URL=http://ai-backend:8000
    networks:
      - app-network
      
  # Service Backend IA (Reconnaissance faciale)
  ai-backend:
    build:
      context: ./IA/backend
      dockerfile: Dockerfile
    container_name: ai-backend
    restart: always
    ports:
      - "8000:8000"
    volumes:
      - ./IA/backend:/app
    environment:
      - TF_FORCE_GPU_ALLOW_GROWTH=true
      - PYTHONUNBUFFERED=1
    networks:
      - app-network
      
  # Service Frontend IA (Interface de reconnaissance faciale)
  ai-frontend:
    build:
      context: ./IA/frontend
      dockerfile: Dockerfile
    container_name: ai-frontend
    restart: always
    ports:
      - "3001:3001"
    volumes:
      - ./IA/frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - ai-backend
    environment:
      - NEXT_PUBLIC_AI_API_URL=http://localhost:8000
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  mongo_data:
  redis_data:
  es_data: