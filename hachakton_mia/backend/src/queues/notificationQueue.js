/**
 * Configuration de la file d'attente pour les notifications
 * Utilise Bull pour g√©rer le traitement asynchrone des notifications
 */
const Queue = require("bull")  // Biblioth√®que de gestion de files d'attente
const redis = require("../config/redis")  // Client Redis
const { sendNotification } = require('../wsServer')  // Fonction d'envoi via WebSocket

/**
 * Cr√©ation d'une file d'attente nomm√©e "notifications"
 * Configuration pour se connecter √† Redis (backend de stockage de Bull)
 */
const notificationQueue = new Queue("notifications", {
  redis: { host: "127.0.0.1", port: 6379 },  // Connexion √† Redis local
});

/**
 * D√©finition du processus de traitement des notifications
 * @async
 * @param {Object} job - T√¢che Bull contenant les donn√©es de la notification
 */
notificationQueue.process(async (job) => {
  // Extraction des donn√©es de la notification
  const { recipientId, message } = job.data;
  console.log(`üîî Envoi notification √† ${recipientId}: ${message}`);
  
  // Dans un cas r√©el, on pourrait √©galement sauvegarder la notification en base de donn√©es,
  // envoyer un email, ou d√©clencher d'autres actions

  // √âmission de la notification en temps r√©el via WebSockets
  sendNotification(recipientId, message)
});

/**
 * Ajoute une notification √† la file d'attente
 * @async
 * @param {string} recipientId - ID de l'utilisateur destinataire
 * @param {string} message - Contenu de la notification
 */
const addNotificationToQueue = async (recipientId, message) => {
  // Ajout √† la file avec 3 tentatives en cas d'√©chec
  await notificationQueue.add({ recipientId, message }, { attempts: 3 })
}

// Export des fonctionnalit√©s pour utilisation dans d'autres modules
module.exports = { notificationQueue, addNotificationToQueue }